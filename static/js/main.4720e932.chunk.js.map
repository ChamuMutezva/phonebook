{"version":3,"sources":["logo.svg","Phonebook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Phonebook","props","useState","newName","setNewName","newNumber","setNewNumber","onSubmit","event","preventDefault","newPerson","name","id","personList","length","phone","namedPerson","filter","person","toLocaleLowerCase","trim","console","log","setPersons","concat","alert","value","onChange","target","type","App","persons","searchTerm","setSearchTerm","filterResults","includes","key","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kJAAAA,EAAOC,QAAU,IAA0B,kC,wGCyD5BC,EAvDG,SAACC,GAAU,MAEKC,mBAAS,IAFd,mBAElBC,EAFkB,KAETC,EAFS,OAGSF,mBAAS,IAHlB,mBAGlBG,EAHkB,KAGPC,EAHO,KAwCzB,OACI,6BACI,yCACA,0BAAMC,SAtCI,SAACC,GACfA,EAAMC,iBAEN,IAAMC,EAAY,CAChBC,KAAMR,EACNS,GAAIX,EAAMY,WAAWC,OAAS,EAC9BC,MAAOV,GAGHW,EAAcf,EAAMY,WAAWI,QAAO,SAAAC,GAAM,OAChDA,EAAOP,KAAKQ,oBAAoBC,SAChCV,EAAUC,KAAKQ,oBAAoBC,UACrCC,QAAQC,IAAIN,GACe,IAAvBA,EAAYF,OACfb,EAAMsB,WAAWtB,EAAMY,WAAWW,OAAOd,IAExCe,MAAM,GAAD,OAAIf,EAAUC,KAAd,iCAEPP,EAAW,IACXE,EAAa,MAoBL,8CACA,uCAAY,2BAAOoB,MAAOvB,EAASwB,SAfpB,SAACnB,GACxBa,QAAQC,IAAId,EAAMoB,OAAOF,OACzBtB,EAAWI,EAAMoB,OAAOF,UAahB,KACA,+CAAoB,2BAAOA,MAAOrB,EAAWsB,SAZ/B,SAACnB,GACvBa,QAAQC,IAAId,EAAMoB,OAAOF,OAC1BpB,EAAaE,EAAMoB,OAAOF,UAUjB,KACA,kCAAO,4BAAQG,KAAK,UAAb,OAAP,SCCDC,G,YA7CH,WAAO,IAAD,EACc5B,mBAAS,CACrC,CAAEU,GAAI,EAAGD,KAAM,cAAeI,MAAO,kBAFvB,mBACTgB,EADS,KACAR,EADA,OAIoBrB,mBAAS,IAJ7B,mBAIT8B,EAJS,KAIGC,EAJH,KAYVC,EAAgBH,EAAQd,QAAO,SAAAC,GACjC,OAAIA,EAAOP,KAAKwB,SAASH,IACvBX,QAAQC,IAAIJ,GAEZG,QAAQC,IAAIJ,EAAOP,KAAMO,EAAOH,OACzB,wBAAIqB,IAAKlB,EAAON,IAAhB,UAA4BM,EAAOP,KAAnC,UAAgDO,EAAOH,MAAvD,MAEF,QAMX,OACE,6BACE,kBAAC,EAAD,CAAWF,WAAYkB,EAASR,WAAYA,IAC5C,+CAAoB,2BAAOG,MAAOM,EAAYL,SAtB/B,SAACnB,GAClBa,QAAQC,IAAId,EAAMoB,OAAOF,OACzBO,EAAczB,EAAMoB,OAAOF,WAqBzB,uCACA,6BACGK,EAAQM,KAAI,SAAAnB,GAAM,OACjB,wBAAIkB,IAAKlB,EAAON,IACbM,EAAOP,KADV,IACiBO,EAAOH,WAI5B,6BACGiB,EACAE,MChCWI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.4720e932.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react'\r\n\r\nconst Phonebook = (props) => {\r\n   // console.log(props.personList)\r\n    const [newName, setNewName] = useState('');\r\n    const [newNumber, setNewNumber] = useState('');\r\n\r\n    const addPerson = (event) => {\r\n        event.preventDefault();\r\n        //console.log(event.target.value)\r\n        const newPerson = {\r\n          name: newName,\r\n          id: props.personList.length + 1,\r\n          phone: newNumber\r\n        }\r\n    \r\n        const namedPerson = props.personList.filter(person =>\r\n          person.name.toLocaleLowerCase().trim() ===\r\n          newPerson.name.toLocaleLowerCase().trim());\r\n        console.log(namedPerson);\r\n        if (namedPerson.length !== 1) {\r\n         props.setPersons(props.personList.concat(newPerson));\r\n        } else {\r\n          alert(`${newPerson.name} is already in the phonebook`)\r\n        }\r\n        setNewName('');\r\n        setNewNumber('');\r\n      }\r\n    \r\n\r\n\r\n\r\n    const handlePersonChange = (event) => {\r\n        console.log(event.target.value);\r\n        setNewName(event.target.value);\r\n    }\r\n    const handlePhoneNumber = (event) => {\r\n        console.log(event.target.value);\r\n       setNewNumber(event.target.value);\r\n\r\n    }   \r\n\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            <form onSubmit={addPerson}>            \r\n                <h3>Add new person</h3>\r\n                <div> name: <input value={newName} onChange={handlePersonChange} /> </div>\r\n                <div> phone number: <input value={newNumber} onChange={handlePhoneNumber} /> </div>\r\n                <div>  <button type=\"submit\">add</button>  </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Phonebook","import React, { useState } from 'react';\nimport Phonebook from './Phonebook';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst App = () => {\n  const [persons, setPersons] = useState([\n    { id: 0, name: 'Arto Hellas', phone: '+27832678210' }\n  ])\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const filterData = (event) => {\n    console.log(event.target.value);\n    setSearchTerm(event.target.value);\n    //filterResults()\n  }\n\n  const filterResults = persons.filter(person => {\n      if (person.name.includes(searchTerm)) {\n        console.log(person);\n        // return person;       \n        console.log(person.name, person.phone);\n        return <h4 key={person.id}>  name={person.name} phone={person.phone} </h4>\n      }\n      return null\n    })\n\n\n\n  // console.log(persons);\n  return (\n    <div>\n      <Phonebook personList={persons} setPersons={setPersons} />\n      <div>Filter by name <input value={searchTerm} onChange={filterData} /></div>\n      <h2>Numbers</h2>\n      <div>\n        {persons.map(person =>\n          <h4 key={person.id}>\n            {person.name} {person.phone}\n          </h4>)\n        }\n      </div>\n      <div>\n        {searchTerm}\n        {filterResults}\n      </div>\n    </div>\n  )\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}